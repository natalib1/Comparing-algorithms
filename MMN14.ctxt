#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment1.params=array_a\ array_b
comment1.target=void\ COPY_ARRAY(int[],\ int[])
comment1.text=\r\nCopy\ the\ values\ from\ one\ array\ to\ the\ other\ array\r\n\ @param\ array\ -\ the\ array\ that\ will\ be\ \ \r\n\ @param\ n\ -the\ length\ of\ the\ array.\r\n\ @param\ i\ -\ the\ index\ (begin\ at\ the\ middle\ of\ the\ array\ because\ the\ bigger\ index\ represent\ the\ leafes.\r\n
comment2.params=array\ n
comment2.target=void\ BUILD_MIN_HEAP(int[],\ int)
comment2.text=\r\nBuild\ a\ minimum\ heap\ by\ array\ and\ return\ a\ sorted\ array\r\n\ @param\ array\ -\ the\ array\ that\ will\ built\ the\ heap\ \ \r\n\ @param\ n\ -the\ length\ of\ the\ array.\r\n\ @param\ i\ -\ the\ index\ (begin\ at\ the\ middle\ of\ the\ array\ because\ the\ bigger\ index\ represent\ the\ leafes.\r\n
comment3.params=array\ j\ n
comment3.target=void\ MIN_HEAPIFY(int[],\ int,\ int)
comment3.text=\r\nOrganize\ the\ heap\ so\ that\ the\ root\ of\ each\ sub-heap\ will\ be\ the\ smollest\ number.\r\n\ @param\ array\ -\ the\ array\ that\ will\ be\ \ \r\n\ @param\ n\ -the\ length\ of\ the\ array.\r\n\ @param\ i\ -\ the\ index\ (begin\ at\ the\ middle\ of\ the\ array\ because\ the\ bigger\ index\ represent\ the\ leafes.\r\n\ @param\ left\ -the\ left\ son\ of\ the\ root\ i.\r\n\ @param\ right\ -the\ right\ son\ of\ the\ root\ i.\r\n
comment4.params=array\ i\ j
comment4.target=void\ EXCHANGE(int[],\ int,\ int)
comment4.text=\r\nExchange\ between\ two\ arguments\ in\ the\ array.\r\n\ @param\ array\ -\ the\ array\ that\ will\ be.\ \ \r\n\ @param\ i\ -\ one\ of\ the\ argument\ to\ replace.\r\n\ @param\ j\ -\ the\ second\ argument\ to\ replace.\r\n\ @param\ temp\ -temporary\ parameter.\r\n
comment5.params=array\ n
comment5.target=int\ HEAP_EXTRACT_MIN(int[],\ int)
comment5.text=\r\nExtract\ the\ smallest\ nember\ of\ the\ heap\ and\ re-organize\ the\ heap.\r\n\ @param\ array\ -\ the\ array\ that\ will\ be\ \ \r\n\ @param\ n\ -\ the\ length\ of\ the\ array.\r\n\ @param\ min\ -\ the\ smallest\ number\ in\ the\ array.\r\n\ @return\ the\ smallest\ number\ of\ the\ array.\r\n
comment6.params=array\ p\ r\ i
comment6.target=int\ RANDOMIZED_SELECT(int[],\ int,\ int,\ int)
comment6.text=\r\nFind\ the\ minimum\ of\ the\ numbers\ in\ the\ array.\r\n\ @param\ array\ -\ the\ array\ that\ will\ be\ \ \r\n\ @param\ p\ -the\ beginning\ of\ the\ array.\r\n\ @param\ r\ -\ the\ ending\ of\ the\ array.\r\n\ @param\ i\ -\ the\ index.\r\n\ @return\ the\ i's\ smallest\ number\ of\ the\ array.\r\n
comment7.params=array\ p\ r
comment7.target=int\ RANDOMIZED_PARTITION(int[],\ int,\ int)
comment7.text=\r\n\ \ Doing\ random\ divide\ for\ the\ array.\r\n\ @param\ array\ -\ the\ array\ that\ will\ be\ random\ divide.\r\n\ @param\ p\ -\ the\ beginning\ of\ the\ array.\r\n\ @param\ r\ -\ the\ ending\ of\ the\ array.\r\n\ @return\ himself.\r\n
comment8.params=array\ p\ r
comment8.target=int\ PARTITION(int[],\ int,\ int)
comment8.text=\r\n\ Divide\ the\ array\ for\ the\ method\ QUICKSORT.\r\n\ @param\ array\ -\ the\ array\ that\ the\ PARTITION\ will\ divide.\ \r\n\ @param\ p\ -\ the\ beginning\ of\ the\ array.\r\n\ @param\ r\ -\ the\ ending\ of\ the\ array.\r\n\ @return\ the\ beginning\ array\ after\ the\ array\ divided.\r\n
comment9.params=array\ p\ r
comment9.target=void\ QUICKSORT(int[],\ int,\ int)
comment9.text=\r\n\ QUICKSORT\ copy\ the\ array\ "array".\r\n\ @param\ array\ -\ the\ array\ that\ will\ be\ sorting\r\n\ @param\ p\ -\ beginning\ of\ the\ array.\r\n\ @param\ r\ -\ the\ ending\ of\ the\ array.\r\n
numComments=10
